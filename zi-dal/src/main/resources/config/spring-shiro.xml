<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!--会话id生成器，默认自动创建-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
    <!--&lt;!&ndash;AbstractSessionDAO提供了SessionDAO的基础实现，-->
    <!--如生成会话ID等；CachingSessionDAO提供了对开发者透明的会话缓存的功能，只需要设置相应的CacheManager即可；-->
    <!--MemorySessionDAO直接在内存中进行会话维护；-->
    <!--而EnterpriseCacheSessionDAO提供了缓存功能的会话维护，默认情况下使用MapCache实现，内部使用ConcurrentHashMap保存缓存的会话。&ndash;&gt;-->
    <bean id="sessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!--sessionCookie模版-->
    <!--sessionIdCookie是sessionManager创建会话Cookie的模板：-->
    <!--sessionIdCookie.name：设置Cookie名字，默认为JSESSIONID；-->
    <!--sessionIdCookie.domain：设置Cookie的域名，默认空，即当前访问的域名；-->
    <!--sessionIdCookie.path：设置Cookie的路径，默认空，即存储在域名根下；-->
    <!--sessionIdCookie.maxAge：设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie；-->
    <!--sessionIdCookie.httpOnly：如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；-->
    <!--sessionManager.sessionIdCookieEnabled：是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--设置为true则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；-->
        <property name="httpOnly" value="true"/>
        <property name="name" value="ZI_JSESSIONID"/>
    </bean>
    <!-- 会话验证调度器，每一分钟检查一次失效会话 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!--相隔多久检查一次session的有效性-->
        <property name="sessionValidationInterval" value="60000"/>
        <!--回调会话管理器-->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 会话管理器，设置半小时失效一次 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--设置有效时间为半小时-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!--是否删除无效的session,默认也是开启-->
        <property name="deleteInvalidSessions" value="true"/>
        <!--是否开始检测，默认开启-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--间隔多少时间检测，不配置默认半小时检测-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- Shiro提供SessionDAO用于会话的CRUD,每当一个会话被创建或更新时，它的数据需要持久化到一个存储位置以便它能够被稍后的应用程序访问，实现这个功能的组件就是SessionDAO。-->
        <property name="sessionDAO" ref="sessionDao"/>
        <!--是否启用sessionCookie会话模版-->
        <property name="sessionIdCookieEnabled" value="true"/>
        <!--会话Cookie模版-->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!--本地定义-->
    <bean id="myShiroRelam" class="com.zi.shiro.MyRealm"></bean>

    <!-- rememberMe管理器 即记住我的Cookie，保存时长30天； -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!--2592000
			30天 604800保存7天 -->
    </bean>
    <!-- 记住我管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <!-- 定义Shiro安全管理配置 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myShiroRelam"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!--<property name="cacheManager" ref="redisCacheManager" />-->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 权限认证颗粒度 -->
    <bean id="urlPermissionsFilter" class="com.zi.shiro.UrlPermissionsFilter"></bean>
    <!--防止回话二次登录-->
    <bean id = "kickoutSessionControlFilter" class = "com.zi.shiro.KickoutSessionControlFilter">
        <!--等shiro框架配置完成加入redis缓存技术-->
    </bean>

    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录页面跳转 -->
        <property name="loginUrl" value="/login.htm"/>
        <!-- 成功跳转 -->
        <property name="successUrl" value="/index.htm"/>
        <!-- 没有权限跳转 -->
        <property name="unauthorizedUrl" value="/login.htm"/>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="urlPermissionsFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
                <entry key="sessionFilter">
                    <bean class="com.zi.shiro.SessionFilter"></bean>
                </entry>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

    <!-- Shiro权限过滤过滤器定义 -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                <!--公共资源-->
                /css/** = anon
                /images/** = anon
                /js/** = anon
                <!--登录、注册接口-->
                /login.htm = anon
                /sigin.htm = anon
                /register.htm = anon
                /** = sessionFilter,authc
                /userLogout.htm = logout,kickout
            </value>
        </constructor-arg>
    </bean>

</beans>
